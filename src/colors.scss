@use "sass:color";

// based on a gist from Simon Padbury (https://github.com/SimonPadbury):
// https://gist.github.com/SimonPadbury/e0f081400e1c59487a806ea601067ba4

$ci-colors: (
  "inherit": inherit,
  "current": currentColor,
  "transparent": transparent,
  "black": black,
  "white": white,
  "green": #00d27e,
  "dark-green": #014948,
  "fresh-green": #c5f120,
  "light-green": #d1ffb4,
  "sky-blue": #6bdff0,
  "ocean-blue": #05a4d6,
  "purple": #9f85d3,
  "warn-orange": #e67c5a,
  "red": #e93947,
);
$color-shade-interval: 7.6%;
$classes: (
  "accent": "accent-color",
  "bg": "background-color",
  "border": "border-color",
  "caret": "caret-color",
  "decoration": "text-decoration-color",
  "outline": "outline-color",
  "text": "color",
);

:root {
  @each $key, $color in $ci-colors {
    --#{$key}: #{$color};

    @if (
      $key !=
        "inherit" and
        $key !=
        "current" and
        $key !=
        "transparent" and
        $key !=
        "black" and
        $key !=
        "white"
    ) {
      --#{$key}-100: color.adjust(
        $color,
        $lightness: $color-shade-interval * 4,
        $space: hsl
      );

      --#{$key}-200: color.adjust(
        $color,
        $lightness: $color-shade-interval * 3,
        $space: hsl
      );

      --#{$key}-300: color.adjust(
        $color,
        $lightness: $color-shade-interval * 2,
        $space: hsl
      );

      --#{$key}-400: color.adjust(
        $color,
        $lightness: $color-shade-interval,
        $space: hsl
      );

      --#{$key}-500: $color;

      --#{$key}-600: color.adjust(
        $color,
        $lightness: -$color-shade-interval,
        $space: hsl
      );

      --#{$key}-700: color.adjust(
        $color,
        $lightness: -($color-shade-interval * 2),
        $space: hsl
      );

      --#{$key}-800: color.adjust(
        $color,
        $lightness: -($color-shade-interval * 3),
        $space: hsl
      );

      --#{$key}-900: color.adjust(
        $color,
        $lightness: -($color-shade-interval * 4),
        $space: hsl
      );
    }
  }
}

@each $class-key, $attribute-key in $classes {
  @each $key, $color in $ci-colors {
    .#{$class-key}-#{$key} {
      #{$attribute-key}: $color;

      @if (
        $key !=
          "inherit" and
          $key !=
          "current" and
          $key !=
          "transparent" and
          $key !=
          "black" and
          $key !=
          "white"
      ) {
        &-100 {
          #{$attribute-key}: color.adjust(
            $color,
            $lightness: $color-shade-interval * 4,
            $space: hsl
          );
        }

        &-200 {
          #{$attribute-key}: color.adjust(
            $color,
            $lightness: $color-shade-interval * 3,
            $space: hsl
          );
        }

        &-300 {
          #{$attribute-key}: color.adjust(
            $color,
            $lightness: $color-shade-interval * 2,
            $space: hsl
          );
        }

        &-400 {
          #{$attribute-key}: color.adjust(
            $color,
            $lightness: $color-shade-interval,
            $space: hsl
          );
        }

        &-500 {
          #{$attribute-key}: $color;
        }

        &-600 {
          #{$attribute-key}: color.adjust(
            $color,
            $lightness: -$color-shade-interval,
            $space: hsl
          );
        }

        &-700 {
          #{$attribute-key}: color.adjust(
            $color,
            $lightness: -($color-shade-interval * 2),
            $space: hsl
          );
        }

        &-800 {
          #{$attribute-key}: color.adjust(
            $color,
            $lightness: -($color-shade-interval * 3),
            $space: hsl
          );
        }

        &-900 {
          #{$attribute-key}: color.adjust(
            $color,
            $lightness: -($color-shade-interval * 4),
            $space: hsl
          );
        }
      }
    }
  }
}
